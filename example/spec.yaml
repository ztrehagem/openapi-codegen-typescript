openapi: "3.0.3"
info:
  title: Example API
  version: "1.0.0"
paths:
  /session:
    get:
      operationId: getSession
      tags: [Session]
      summary: check existence of session
      responses:
        204:
          description: exists a session
        401:
          description: unauthorized
    post:
      operationId: createSession
      tags: [Session]
      summary: create session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: me@example.com
                password:
                  type: string
                  format: password
                  example: Passw0rd!
      responses:
        204:
          description: logged in
        400:
          description: wrong login information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResp"
    delete:
      operationId: deleteSession
      tags: [Session]
      summary: delete sesion
      responses:
        204:
          description: logged out
  /users:
    get:
      operationId: indexUsers
      tags: [User]
      summary: search users
      parameters:
        - in: query
          name: name
          schema:
            type: string
            example: John
      responses:
        200:
          description: search result
          content:
            application/json:
              schema:
                type: object
                required: [users]
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
    post:
      operationId: createUser
      tags: [User]
      summary: register new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [user]
              properties:
                user:
                  $ref: "#/components/schemas/User"
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                type: object
                required: [user]
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResp"
  /users/{user_id}:
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
          example: 12345
    get:
      operationId: getUser
      tags: [User]
      summary: get a user
      responses:
        200:
          description: found a user
          content:
            application/json:
              schema:
                type: object
                required: [user]
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        401:
          description: login required
        404:
          description: not found
    put:
      operationId: updateUser
      tags: [User]
      summary: update user information
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: updated
          content:
            application/json:
              schema:
                type: object
                required: [user]
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrorResp"
    delete:
      operationId: deleteUser
      tags: [User]
      summary: unregister a user
      responses:
        204:
          description: deleted
        401:
          description: permission denied
        404:
          description: not found / already deleted
  /binary:
    post:
      operationId: postBinary
      tags: [Binary]
      summary: Binary
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                foo:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
components:
  schemas:
    DateString:
      type: string
      format: date
      example: "2020-02-02"
    DateTimeString:
      type: string
      format: date-time
      example: "2020-02-02T23:59:59Z"
    ValidationError:
      type: object
      required: [key, message]
      properties:
        key:
          type: string
          example: name
        message:
          type: string
          example: Invalid characters included.
    ValidationErrors:
      type: array
      items:
        $ref: "#/components/schemas/ValidationError"
    ValidationErrorResp:
      type: object
      required: [errors]
      properties:
        errors:
          $ref: "#/components/schemas/ValidationErrors"
    ImageSet:
      type: object
      properties:
        sm:
          type: string
          nullable: true
        md:
          type: string
          nullable: true
        lg:
          type: string
          nullable: true
    User:
      type: object
      required: [id, name]
      properties:
        id:
          type: integer
          example: 12345
          readOnly: true
        name:
          type: string
          example: John Doe
        birthday:
          allOf:
            - $ref: "#/components/schemas/DateString"
          description: user's birthday
          nullable: true
        image:
          allOf:
            - $ref: "#/components/schemas/ImageSet"
          readOnly: true
        imagePost:
          type: string
          nullable: true
          writeOnly: true
        password:
          type: string
          format: password
          writeOnly: true
